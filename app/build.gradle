import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'
apply plugin: 'com.google.firebase.firebase-perf'

android {
    compileSdkVersion versions.compileSdk
    defaultConfig {
        applicationId "com.amglhit.jhk"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true

        ndk {
            //设置支持的SO库架构
            abiFilters 'armeabi'
        }

        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                String build = new Date().format("MMddHH") + (char) (65 + (int) ((Calendar.getInstance().get(Calendar.MINUTE) % 60) / 15))
                String fileName =
                        "jhk_${variant.versionName.replace(".", "")}_${variant.versionCode}_${variant.buildType.name}_${variant.flavorName}_${build}.apk"

                output.outputFileName = fileName
            }
        }

        resConfigs "en", "zh"
    }

    signingConfigs {
        jhk {
            storeFile file(System.properties['keyStore'])
            storePassword System.properties['keyStorePWd']
            keyAlias System.properties['keyAlias']
            keyPassword System.properties['keyAliasPassword']
        }
    }

    androidExtensions {
        experimental = true
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.jhk
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            signingConfig signingConfigs.jhk
        }
    }

    compileOptions {
        sourceCompatibility versions.sourceCompat
        targetCompatibility versions.targetCompat
    }

    dexOptions {
        additionalParameters = ["--set-max-idx-number=62000"]
        jumboMode true
    }

    flavorDimensions "channel"
    productFlavors {
        store {
            dimension "channel"
            versionCode 1010
            versionName "1.1"

        }
        google {
            dimension "channel"
            versionCode 1020
            versionName "1.2"
        }
    }

    rootProject.ext.currentFlavor = getCurrentFlavor()
    rootProject.ext.forGooglePlay = currentFlavor.contains("google")

//    println("====== current-m: " + currentFlavor + "    ==== " + forGooglePlay)

    //!!! 避免api26引起的crash，所有依赖的support都改成全局support版本
    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'com.android.support') {
                if (!details.requested.name.startsWith("multidex")) {
                    details.useVersion "$versions.supportLibrary"
                }
            }
        }
    }
}

dependencies {
    implementation project(':msuite')
    implementation project(':mlocation')
    implementation project(':mmap')

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "com.android.support:appcompat-v7:$versions.supportLibrary"
    implementation "com.android.support.constraint:constraint-layout:$versions.constraintLayout"
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    implementation 'android.arch.lifecycle:extensions:1.1.1'
    testImplementation "junit:junit:$versions.junit"
    androidTestImplementation "com.android.support.test:runner:$versions.testRunner"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$versions.espresso"

    implementation "com.jakewharton.timber:timber:$versions.timber"

    //ViewModel and LiveData
    implementation "android.arch.lifecycle:extensions:$versions.lifecycle"
    // Java8 support for Lifecycle
    implementation "android.arch.lifecycle:common-java8:$versions.lifecycle"
    // optional - Test helpers for LiveData
    testImplementation "android.arch.core:core-testing:$versions.lifecycle"

    implementation 'com.android.support:multidex:1.0.3'

    implementation("com.github.hotchemi:permissionsdispatcher:3.2.0") {
        // if you don't use android.app.Fragment you can exclude support for them
        exclude module: "support-v13"
    }

    kapt "com.github.hotchemi:permissionsdispatcher-processor:3.2.0"

    debugImplementation 'com.facebook.stetho:stetho:1.5.0'
    debugImplementation 'com.facebook.stetho:stetho-okhttp3:1.5.0'

    implementation "com.google.code.gson:gson:$versions.gson"

    implementation "com.tencent.bugly:crashreport:2.6.6.1"
    implementation "com.tencent.bugly:nativecrashreport:3.3.1"

    implementation 'com.google.firebase:firebase-core:16.0.1'
    implementation 'com.crashlytics.sdk.android:crashlytics:2.9.4'
    implementation 'com.google.firebase:firebase-perf:16.0.0'
}

apply plugin: 'com.google.gms.google-services'

def getCurrentFlavor() {
    Gradle gradle = getGradle()
    String taskReqStr = gradle.getStartParameter().getTaskRequests().toString()
    Pattern pattern
    if (taskReqStr.contains("assemble")) {
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    } else {
        pattern = Pattern.compile("generate(\\w+)(Release|Debug)")
    }
    Matcher matcher = pattern.matcher(taskReqStr)
    if (matcher.find()) {
        String flavor = matcher.group(1)
        // This makes first character to lowercase.
        char[] c = flavor.toCharArray()
        c[0] = Character.toLowerCase(c[0])
        flavor = new String(c)
        println "getCurrentFlavor:" + flavor
        return flavor
    } else {
        println "getCurrentFlavor:cannot_find_current_flavor"
        return ""
    }
}
